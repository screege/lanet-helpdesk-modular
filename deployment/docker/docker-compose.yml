version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: lanet-helpdesk-db
    environment:
      POSTGRES_DB: lanet_helpdesk
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-Poikl55+*}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - lanet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d lanet_helpdesk"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.backend
    container_name: lanet-helpdesk-backend
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-Poikl55+*}@postgres:5432/lanet_helpdesk
      JWT_SECRET_KEY: ${JWT_SECRET:-lanet-helpdesk-secret-2024}
      FLASK_ENV: production
      UPLOAD_FOLDER: /app/uploads
      REDIS_URL: redis://redis:6379/0
      SMTP_HOST: mail.compushop.com.mx
      SMTP_PORT: 587
      SMTP_USERNAME: ti@compushop.com.mx
      SMTP_PASSWORD: Iyhnbsfg55+*
      SMTP_USE_TLS: true
      IMAP_HOST: mail.compushop.com.mx
      IMAP_PORT: 993
      IMAP_USERNAME: ti@compushop.com.mx
      IMAP_PASSWORD: Iyhnbsfg55+*
      IMAP_USE_SSL: true
      MAX_CONTENT_LENGTH: 10485760
      SESSION_TIMEOUT_MINUTES: 480
      PASSWORD_RESET_TIMEOUT_MINUTES: 15
      LOG_LEVEL: INFO
      LOG_FILE: /app/logs/app.log
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      - backend_reports:/app/reports_files
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lanet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (HTTP only initially, SSL configured later)
  frontend:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.frontend
    container_name: lanet-helpdesk-frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-http.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    networks:
      - lanet-network
    restart: unless-stopped

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: lanet-helpdesk-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lanet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SLA Monitor Service
  sla-monitor:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.sla-monitor
    container_name: lanet-helpdesk-sla-monitor
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-Poikl55+*}@postgres:5432/lanet_helpdesk
    volumes:
      - sla_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - lanet-network
    restart: unless-stopped

volumes:
  postgres_data:
  backend_logs:
  backend_uploads:
  backend_reports:
  redis_data:
  sla_logs:

networks:
  lanet-network:
    driver: bridge

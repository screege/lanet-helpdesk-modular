name: üê≥ Deploy LANET Helpdesk to Azure Container Instances

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: lanet-helpdesk-prod-rg
  AZURE_LOCATION: centralus
  CONTAINER_GROUP_NAME: lanet-helpdesk-prod
  REGISTRY_NAME: lanethelpdesk
  DOMAIN_NAME: helpdesk.lanet.mx

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîê Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: üóëÔ∏è Clean up existing resources
      run: |
        echo "üóëÔ∏è Cleaning up existing resources..."
        az group delete --name ${{ env.AZURE_RESOURCE_GROUP }} --yes --no-wait || true
        echo "‚è≥ Waiting for cleanup to complete..."
        sleep 60
        echo "‚úÖ Cleanup completed"

    - name: üèóÔ∏è Create Resource Group
      run: |
        az group create \
          --name ${{ env.AZURE_RESOURCE_GROUP }} \
          --location ${{ env.AZURE_LOCATION }}
          
    - name: üîß Register Azure providers
      run: |
        echo "üîß Registering required Azure providers..."
        az provider register --namespace Microsoft.ContainerRegistry --wait
        az provider register --namespace Microsoft.ContainerInstance --wait
        az provider register --namespace Microsoft.DBforPostgreSQL --wait
        echo "‚úÖ Providers registered successfully"

    - name: üì¶ Create Azure Container Registry
      run: |
        if ! az acr show --name ${{ env.REGISTRY_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &> /dev/null; then
          az acr create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.REGISTRY_NAME }} \
            --sku Basic \
            --admin-enabled true
        fi
        
    - name: üîê Login to ACR
      run: |
        az acr login --name ${{ env.REGISTRY_NAME }}
        
    - name: üê≥ Build and push Docker images
      run: |
        # Get ACR login server
        ACR_LOGIN_SERVER=$(az acr show --name ${{ env.REGISTRY_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query loginServer --output tsv)

        # Build and push backend (using root context to access database/)
        docker build -f deployment/docker/Dockerfile.backend -t $ACR_LOGIN_SERVER/lanet-helpdesk-backend:${{ github.sha }} .
        docker push $ACR_LOGIN_SERVER/lanet-helpdesk-backend:${{ github.sha }}

        # Build and push frontend
        docker build -f deployment/docker/Dockerfile.frontend -t $ACR_LOGIN_SERVER/lanet-helpdesk-frontend:${{ github.sha }} .
        docker push $ACR_LOGIN_SERVER/lanet-helpdesk-frontend:${{ github.sha }}

        # Build and push SLA monitor (using root context to access database/)
        docker build -f deployment/docker/Dockerfile.sla-monitor -t $ACR_LOGIN_SERVER/lanet-helpdesk-sla:${{ github.sha }} .
        docker push $ACR_LOGIN_SERVER/lanet-helpdesk-sla:${{ github.sha }}

        # Build and push email processor (using root context to access database/)
        docker build -f deployment/docker/Dockerfile.email-processor -t $ACR_LOGIN_SERVER/lanet-helpdesk-email:${{ github.sha }} .
        docker push $ACR_LOGIN_SERVER/lanet-helpdesk-email:${{ github.sha }}
        
    - name: üóÑÔ∏è Create PostgreSQL Database
      run: |
        echo "üóÑÔ∏è Creating PostgreSQL Flexible Server in Central US (verified supported region)..."
        az postgres flexible-server create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name lanet-helpdesk-db \
          --location ${{ env.AZURE_LOCATION }} \
          --admin-user postgres \
          --admin-password "Poikl55+*" \
          --sku-name Standard_B1ms \
          --tier Burstable \
          --storage-size 32 \
          --version 14 \
          --public-access 0.0.0.0 \
          --yes

        echo "üóÑÔ∏è Creating database..."
        az postgres flexible-server db create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --server-name lanet-helpdesk-db \
          --database-name lanet_helpdesk

        echo "üîß Configuring firewall rules..."
        az postgres flexible-server firewall-rule create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name lanet-helpdesk-db \
          --rule-name AllowAzureServices \
          --start-ip-address 0.0.0.0 \
          --end-ip-address 0.0.0.0

        echo "‚úÖ PostgreSQL Flexible Server created successfully in Central US"

    - name: üìä Initialize Database Schema and Data
      run: |
        # Get database connection string
        DB_HOST=$(az postgres flexible-server show --name lanet-helpdesk-db --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query fullyQualifiedDomainName --output tsv)

        echo "üîÑ Initializing database schema and data in Azure PostgreSQL..."

        # Install PostgreSQL client
        sudo apt-get update
        sudo apt-get install -y postgresql-client

        # Wait for database to be ready
        echo "‚è≥ Waiting for database to be ready..."
        for i in {1..30}; do
          if PGPASSWORD="Poikl55+*" psql -h "$DB_HOST" -U postgres -d lanet_helpdesk -c "SELECT 1;" > /dev/null 2>&1; then
            echo "‚úÖ Database is ready!"
            break
          fi
          echo "‚è≥ Attempt $i/30 - Database not ready yet, waiting 10 seconds..."
          sleep 10
        done

        # Initialize database with schema and test data
        echo "üì• Initializing database with schema and test data..."
        PGPASSWORD="Poikl55+*" psql -h "$DB_HOST" -U postgres -d lanet_helpdesk -f deployment/azure/init-database.sql

        echo "‚úÖ Database initialization completed successfully"

    - name: üöÄ Deploy Container Group
      run: |
        # Get ACR credentials
        ACR_LOGIN_SERVER=$(az acr show --name ${{ env.REGISTRY_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query loginServer --output tsv)
        ACR_USERNAME=$(az acr credential show --name ${{ env.REGISTRY_NAME }} --query username --output tsv)
        ACR_PASSWORD=$(az acr credential show --name ${{ env.REGISTRY_NAME }} --query passwords[0].value --output tsv)
        
        # Get database connection string
        DB_HOST=$(az postgres flexible-server show --name lanet-helpdesk-db --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query fullyQualifiedDomainName --output tsv)
        
        # Set environment variables for substitution
        export ACR_LOGIN_SERVER="$ACR_LOGIN_SERVER"
        export ACR_USERNAME="$ACR_USERNAME"
        export ACR_PASSWORD="$ACR_PASSWORD"
        export GITHUB_SHA="${{ github.sha }}"
        export DATABASE_URL="postgresql://postgres:Poikl55+*@$DB_HOST:5432/lanet_helpdesk"
        export JWT_SECRET_KEY="lanet-helpdesk-secret-2024"
        export SMTP_HOST="mail.compushop.com.mx"
        export SMTP_PORT="587"
        export SMTP_USERNAME="webmaster@compushop.com.mx"
        export SMTP_PASSWORD="Iyhnbsfg26"
        export SMTP_USE_TLS="true"
        export IMAP_HOST="mail.compushop.com.mx"
        export IMAP_PORT="993"
        export IMAP_USERNAME="it@compushop.com.mx"
        export IMAP_PASSWORD="Iyhnbsfg26+*"
        export IMAP_USE_SSL="true"

        # Prepare container group YAML with environment variables
        envsubst < deployment/azure/container-group.yaml > /tmp/container-group-final.yaml

        # Deploy container group with multiple containers
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --file /tmp/container-group-final.yaml
            
    - name: üì° Get Container Group IP
      id: container-ip
      run: |
        CONTAINER_IP=$(az container show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.CONTAINER_GROUP_NAME }} --query ipAddress.ip --output tsv)
        CONTAINER_FQDN=$(az container show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.CONTAINER_GROUP_NAME }} --query ipAddress.fqdn --output tsv)
        echo "CONTAINER_IP=$CONTAINER_IP" >> $GITHUB_OUTPUT
        echo "CONTAINER_FQDN=$CONTAINER_FQDN" >> $GITHUB_OUTPUT
        
    - name: üîç Verify deployment
      run: |
        # Wait for container to be ready
        sleep 60
        
        # Check health
        curl -f http://${{ steps.container-ip.outputs.CONTAINER_FQDN }}/health || echo "Service not ready yet"
        
    - name: üìä Deployment Summary
      run: |
        echo "üéâ Container deployment completed successfully!"
        echo ""
        echo "üìã Deployment Details:"
        echo "   Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
        echo "   Container Group: ${{ env.CONTAINER_GROUP_NAME }}"
        echo "   Container IP: ${{ steps.container-ip.outputs.CONTAINER_IP }}"
        echo "   Container FQDN: ${{ steps.container-ip.outputs.CONTAINER_FQDN }}"
        echo ""
        echo "üåê Access URLs:"
        echo "   HTTP: http://${{ steps.container-ip.outputs.CONTAINER_FQDN }}"
        echo "   Direct IP: http://${{ steps.container-ip.outputs.CONTAINER_IP }}"
        echo "   Domain: https://${{ env.DOMAIN_NAME }} (after DNS setup)"
        echo ""
        echo "üìù Next Steps:"
        echo "1. Update DNS: ${{ env.DOMAIN_NAME }} ‚Üí ${{ steps.container-ip.outputs.CONTAINER_IP }}"
        echo "2. Configure SSL with Azure Application Gateway or CloudFlare"
        echo "3. Migrate database if needed"

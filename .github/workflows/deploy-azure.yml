name: 🚀 Deploy LANET Helpdesk to Azure

on:
  push:
    branches: [ main, feature/reporting-module ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AZURE_RESOURCE_GROUP: lanet-helpdesk-rg
  AZURE_VM_NAME: lanet-helpdesk-vm
  AZURE_LOCATION: eastus
  DOMAIN_NAME: helpdesk.lanet.mx

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: 🏗️ Create Resource Group
      run: |
        az group create \
          --name ${{ env.AZURE_RESOURCE_GROUP }} \
          --location ${{ env.AZURE_LOCATION }}
          
    - name: 🖥️ Create Virtual Machine
      run: |
        # Check if VM exists
        if ! az vm show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_VM_NAME }} &> /dev/null; then
          echo "Creating new VM..."
          az vm create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_VM_NAME }} \
            --image Ubuntu2204 \
            --size Standard_B2s \
            --admin-username azureuser \
            --generate-ssh-keys \
            --public-ip-sku Standard \
            --public-ip-address-allocation static \
            --public-ip-address-dns-name lanet-helpdesk
        else
          echo "VM already exists, skipping creation..."
        fi
        
    - name: 🌐 Configure Network Security Group
      run: |
        # Allow HTTP, HTTPS, SSH
        az network nsg rule create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --nsg-name ${{ env.AZURE_VM_NAME }}NSG \
          --name AllowHTTP \
          --protocol tcp \
          --priority 1001 \
          --destination-port-range 80 \
          --access allow
          
        az network nsg rule create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --nsg-name ${{ env.AZURE_VM_NAME }}NSG \
          --name AllowHTTPS \
          --protocol tcp \
          --priority 1002 \
          --destination-port-range 443 \
          --access allow
          
    - name: 📡 Get VM Public IP
      id: vm-ip
      run: |
        VM_IP=$(az vm show -d --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_VM_NAME }} --query publicIps -o tsv)
        echo "VM_IP=$VM_IP" >> $GITHUB_OUTPUT
        echo "🌐 VM Public IP: $VM_IP"
        
    - name: 📋 Prepare deployment files
      run: |
        # Create deployment package
        tar -czf deployment-package.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='*.log' \
          .
          
    - name: 📤 Copy files to VM
      run: |
        # Copy deployment package
        scp -o StrictHostKeyChecking=no \
          -i ~/.ssh/id_rsa \
          deployment-package.tar.gz \
          azureuser@${{ steps.vm-ip.outputs.VM_IP }}:/tmp/
          
    - name: 🚀 Deploy application
      run: |
        ssh -o StrictHostKeyChecking=no \
          -i ~/.ssh/id_rsa \
          azureuser@${{ steps.vm-ip.outputs.VM_IP }} << 'EOF'
          
        # Extract files
        sudo mkdir -p /opt/lanet-helpdesk
        cd /opt/lanet-helpdesk
        sudo tar -xzf /tmp/deployment-package.tar.gz
        sudo chown -R azureuser:azureuser /opt/lanet-helpdesk
        
        # Make scripts executable
        chmod +x deployment/scripts/*.sh
        
        # Run installer
        sudo ./deployment/scripts/ubuntu-installer.sh
        
        # Start services
        sudo systemctl start lanet-helpdesk

        # Wait for database to be ready
        sleep 30

        # Run database migrations
        echo "🗄️ Running database migrations..."
        cd /opt/lanet-helpdesk
        sudo docker exec lanet-helpdesk-backend python database/migrations/migration_manager.py

        # Wait for services to be fully ready
        sleep 30

        # Check health
        curl -f http://localhost/api/health || echo "Service not ready yet"
        
        EOF
        
    - name: 🔍 Verify deployment
      run: |
        # Wait a bit more for services to stabilize
        sleep 30
        
        # Check if services are running
        ssh -o StrictHostKeyChecking=no \
          -i ~/.ssh/id_rsa \
          azureuser@${{ steps.vm-ip.outputs.VM_IP }} \
          "sudo systemctl status lanet-helpdesk"
          
    - name: 📊 Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo ""
        echo "📋 Deployment Details:"
        echo "   Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
        echo "   VM Name: ${{ env.AZURE_VM_NAME }}"
        echo "   VM IP: ${{ steps.vm-ip.outputs.VM_IP }}"
        echo ""
        echo "🌐 Access URLs:"
        echo "   HTTP: http://${{ steps.vm-ip.outputs.VM_IP }}"
        echo "   Domain: https://${{ env.DOMAIN_NAME }} (after DNS setup)"
        echo ""
        echo "🔧 Management:"
        echo "   SSH: ssh azureuser@${{ steps.vm-ip.outputs.VM_IP }}"
        echo "   Logs: sudo docker-compose -f /opt/lanet-helpdesk/deployment/docker/docker-compose.yml logs"
        echo ""
        echo "📝 Next Steps:"
        echo "1. Update DNS: ${{ env.DOMAIN_NAME }} → ${{ steps.vm-ip.outputs.VM_IP }}"
        echo "2. Run SSL setup: sudo /opt/lanet-helpdesk/deployment/scripts/setup-ssl.sh"
        echo "3. Migrate database if needed"
        
    - name: 💬 Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Deployment completed!**
            
            📋 **Details:**
            - VM IP: ${{ steps.vm-ip.outputs.VM_IP }}
            - Access: http://${{ steps.vm-ip.outputs.VM_IP }}
            - Domain: https://${{ env.DOMAIN_NAME }}
            
            🔧 **Next steps:**
            1. Update DNS: \`${{ env.DOMAIN_NAME }} → ${{ steps.vm-ip.outputs.VM_IP }}\`
            2. Test the application
            3. Configure SSL if needed`
          })

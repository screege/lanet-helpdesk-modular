#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Monitor continuo del agente LANET
Verifica que el agente est√© enviando heartbeats correctamente
"""

import time
import subprocess
import json
import requests
from datetime import datetime, timedelta
from pathlib import Path

def check_service_status():
    """Verificar si el servicio est√° corriendo"""
    try:
        result = subprocess.run(['sc', 'query', 'LANETAgent'], 
                              capture_output=True, text=True)
        return "RUNNING" in result.stdout
    except:
        return False

def get_last_heartbeat_from_logs():
    """Obtener el √∫ltimo heartbeat de los logs"""
    try:
        log_path = Path("C:/Program Files/LANET Agent/logs/service.log")
        if not log_path.exists():
            return None
        
        # Leer las √∫ltimas l√≠neas del log
        with open(log_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # Buscar la √∫ltima l√≠nea de heartbeat exitoso
        for line in reversed(lines[-100:]):  # √öltimas 100 l√≠neas
            if "Heartbeat sent successfully" in line or "‚úÖ Heartbeat sent" in line:
                # Extraer timestamp
                try:
                    timestamp_str = line.split(' - ')[0]
                    return datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S,%f')
                except:
                    continue
        
        return None
    except:
        return None

def check_backend_connectivity():
    """Verificar conectividad con el backend"""
    try:
        response = requests.get("https://helpdesk.lanet.mx/api/health", timeout=10)
        return response.status_code == 200
    except:
        return False

def get_agent_config():
    """Obtener configuraci√≥n del agente"""
    try:
        config_path = Path("C:/Program Files/LANET Agent/config/agent_config.json")
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return None

def restart_service_if_needed():
    """Reiniciar servicio si no est√° respondiendo"""
    try:
        print("üîÑ Reiniciando servicio del agente...")
        
        # Detener
        subprocess.run(['sc', 'stop', 'LANETAgent'], capture_output=True)
        time.sleep(5)
        
        # Iniciar
        result = subprocess.run(['sc', 'start', 'LANETAgent'], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Servicio reiniciado exitosamente")
            return True
        else:
            print(f"‚ùå Error reiniciando servicio: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Error reiniciando servicio: {e}")
        return False

def main():
    """Monitor principal"""
    print("üîç MONITOR CONTINUO DEL AGENTE LANET")
    print("=" * 50)
    print("Presiona Ctrl+C para detener el monitor")
    print()
    
    check_interval = 60  # Verificar cada minuto
    restart_threshold = 30  # Reiniciar si no hay heartbeat en 30 minutos
    
    consecutive_failures = 0
    max_failures = 5
    
    try:
        while True:
            now = datetime.now()
            print(f"\n[{now.strftime('%Y-%m-%d %H:%M:%S')}] Verificando estado del agente...")
            
            # 1. Verificar servicio
            service_running = check_service_status()
            print(f"   Servicio: {'‚úÖ Corriendo' if service_running else '‚ùå Detenido'}")
            
            if not service_running:
                print("   üîÑ Intentando iniciar servicio...")
                subprocess.run(['sc', 'start', 'LANETAgent'], capture_output=True)
                time.sleep(5)
                service_running = check_service_status()
                print(f"   Servicio despu√©s de inicio: {'‚úÖ Corriendo' if service_running else '‚ùå A√∫n detenido'}")
            
            # 2. Verificar √∫ltimo heartbeat
            last_heartbeat = get_last_heartbeat_from_logs()
            if last_heartbeat:
                time_since = now - last_heartbeat
                minutes_since = time_since.total_seconds() / 60
                print(f"   √öltimo heartbeat: {last_heartbeat.strftime('%H:%M:%S')} ({minutes_since:.1f} min atr√°s)")
                
                if minutes_since > restart_threshold:
                    print(f"   ‚ö†Ô∏è Sin heartbeat por {minutes_since:.1f} minutos (l√≠mite: {restart_threshold})")
                    consecutive_failures += 1
                else:
                    print(f"   ‚úÖ Heartbeat reciente")
                    consecutive_failures = 0
            else:
                print("   ‚ùå No se encontr√≥ heartbeat en logs")
                consecutive_failures += 1
            
            # 3. Verificar conectividad
            backend_ok = check_backend_connectivity()
            print(f"   Backend: {'‚úÖ Accesible' if backend_ok else '‚ùå No accesible'}")
            
            # 4. Verificar configuraci√≥n
            config = get_agent_config()
            if config:
                heartbeat_interval = config.get('agent', {}).get('heartbeat_interval', 0)
                server_url = config.get('server', {}).get('url', '')
                print(f"   Configuraci√≥n: ‚úÖ OK (heartbeat: {heartbeat_interval}s, servidor: {server_url})")
            else:
                print("   Configuraci√≥n: ‚ùå No accesible")
                consecutive_failures += 1
            
            # 5. Decidir si reiniciar
            if consecutive_failures >= max_failures:
                print(f"\n‚ö†Ô∏è PROBLEMA DETECTADO: {consecutive_failures} fallas consecutivas")
                print("   Reiniciando servicio...")
                
                if restart_service_if_needed():
                    consecutive_failures = 0
                    print("   ‚úÖ Servicio reiniciado, esperando estabilizaci√≥n...")
                    time.sleep(30)  # Esperar m√°s tiempo despu√©s del reinicio
                else:
                    print("   ‚ùå Error reiniciando servicio")
            
            # 6. Estado general
            if consecutive_failures == 0:
                status = "‚úÖ NORMAL"
            elif consecutive_failures < 3:
                status = "‚ö†Ô∏è ADVERTENCIA"
            else:
                status = "‚ùå CR√çTICO"
            
            print(f"   Estado general: {status} (fallas: {consecutive_failures}/{max_failures})")
            
            # Esperar antes de la siguiente verificaci√≥n
            print(f"   Pr√≥xima verificaci√≥n en {check_interval} segundos...")
            time.sleep(check_interval)
            
    except KeyboardInterrupt:
        print("\n\nüõë Monitor detenido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error en el monitor: {e}")

if __name__ == "__main__":
    main()
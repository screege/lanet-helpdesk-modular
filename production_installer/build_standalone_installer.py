#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Build Script for LANET Agent Standalone Installer
Creates a single executable file that includes all dependencies and agent files

This script:
1. Embeds all agent files into the installer
2. Creates a standalone executable using PyInstaller
3. Includes all required Python libraries
4. Produces a single .exe file for technician deployment
"""

import os
import sys
import shutil
import subprocess
import zipfile
import base64
from pathlib import Path
import json

def check_requirements():
    """Check if all required tools are available"""
    print("üîç Checking build requirements...")
    
    # Check PyInstaller
    try:
        import PyInstaller
        print(f"‚úÖ PyInstaller {PyInstaller.__version__} available")
    except ImportError:
        print("‚ùå PyInstaller not found. Installing...")
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'pyinstaller'], check=True)
        print("‚úÖ PyInstaller installed")
    
    # Check other required packages
    required_packages = ['requests', 'psycopg2-binary']
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"‚úÖ {package} available")
        except ImportError:
            print(f"‚ùå {package} not found. Installing...")
            subprocess.run([sys.executable, '-m', 'pip', 'install', package], check=True)
            print(f"‚úÖ {package} installed")
    
    print("‚úÖ All requirements satisfied")

def embed_agent_files():
    """Embed agent files into the installer script"""
    print("üì¶ Embedding agent files...")
    
    script_dir = Path(__file__).parent
    agent_files_dir = script_dir / "agent_files"
    installer_script = script_dir / "standalone_installer.py"
    
    if not agent_files_dir.exists():
        print(f"‚ùå Agent files directory not found: {agent_files_dir}")
        return False
    
    # Create a zip archive of agent files
    zip_buffer = zipfile.ZipFile('temp_agent_files.zip', 'w', zipfile.ZIP_DEFLATED)
    
    for root, dirs, files in os.walk(agent_files_dir):
        # Skip unwanted directories
        dirs[:] = [d for d in dirs if d not in ['.git', '__pycache__', '.pytest_cache', 'build', 'dist']]
        
        for file in files:
            if not file.endswith(('.pyc', '.pyo', '.log')):
                file_path = Path(root) / file
                arc_path = file_path.relative_to(agent_files_dir)
                zip_buffer.write(file_path, arc_path)
    
    zip_buffer.close()
    
    # Read the zip file and encode it
    with open('temp_agent_files.zip', 'rb') as f:
        zip_data = f.read()
    
    encoded_data = base64.b64encode(zip_data).decode('utf-8')
    
    # Read the installer script
    with open(installer_script, 'r', encoding='utf-8') as f:
        script_content = f.read()
    
    # Replace the embedded files section
    embedded_section = f'''
# Embedded agent files (auto-generated by build script)
EMBEDDED_AGENT_FILES_DATA = """{encoded_data}"""

def extract_embedded_agent_files(target_dir):
    """Extract embedded agent files to target directory"""
    import zipfile
    import base64
    import io
    
    try:
        # Decode the embedded data
        zip_data = base64.b64decode(EMBEDDED_AGENT_FILES_DATA)
        
        # Extract to target directory
        with zipfile.ZipFile(io.BytesIO(zip_data), 'r') as zip_ref:
            zip_ref.extractall(target_dir)
        
        return True
    except Exception as e:
        print(f"Failed to extract embedded files: {{e}}")
        return False
'''
    
    # Replace the placeholder
    script_content = script_content.replace(
        "# Embedded agent files will be added here by the build script\nEMBEDDED_AGENT_FILES = {}",
        embedded_section
    )
    
    # Update the extract_embedded_files method to use the new function
    script_content = script_content.replace(
        """            # For now, copy from existing agent_files directory
            # In the final build, this will extract from embedded data
            source_dir = Path(__file__).parent / "agent_files"
            if source_dir.exists():
                shutil.copytree(source_dir, self.temp_dir / "agent_files")
                self.log_message("‚úÖ Agent files extracted successfully")
                return True
            else:
                self.log_message("‚ùå Agent files not found")
                return False""",
        """            # Extract embedded agent files
            agent_files_dir = self.temp_dir / "agent_files"
            agent_files_dir.mkdir(parents=True, exist_ok=True)
            
            if extract_embedded_agent_files(agent_files_dir):
                self.log_message("‚úÖ Agent files extracted successfully")
                return True
            else:
                self.log_message("‚ùå Failed to extract embedded agent files")
                return False"""
    )
    
    # Write the modified script
    embedded_script = script_dir / "standalone_installer_embedded.py"
    with open(embedded_script, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    # Cleanup
    os.remove('temp_agent_files.zip')
    
    print(f"‚úÖ Agent files embedded into {embedded_script}")
    return embedded_script

def create_version_info():
    """Create version info file for the executable"""
    print("üìù Creating version info...")
    
    version_info_content = '''# UTF-8
#
# For more details about fixed file info 'ffi' see:
# http://msdn.microsoft.com/en-us/library/ms646997.aspx
VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=(3,0,0,0),
    prodvers=(3,0,0,0),
    mask=0x3f,
    flags=0x0,
    OS=0x40004,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
    ),
  kids=[
    StringFileInfo(
      [
      StringTable(
        u'040904B0',
        [StringStruct(u'CompanyName', u'Lanet Systems'),
        StringStruct(u'FileDescription', u'LANET Helpdesk Agent Installer'),
        StringStruct(u'FileVersion', u'3.0.0.0'),
        StringStruct(u'InternalName', u'LANET_Agent_Installer'),
        StringStruct(u'LegalCopyright', u'Copyright ¬© 2025 Lanet Systems'),
        StringStruct(u'OriginalFilename', u'LANET_Agent_Installer.exe'),
        StringStruct(u'ProductName', u'LANET Helpdesk Agent'),
        StringStruct(u'ProductVersion', u'3.0.0.0')])
      ]), 
    VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
  ]
)'''
    
    with open('version_info.txt', 'w', encoding='utf-8') as f:
        f.write(version_info_content)
    
    print("‚úÖ Version info created")

def create_pyinstaller_spec():
    """Create PyInstaller spec file"""
    print("üìã Creating PyInstaller spec file...")
    
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['standalone_installer_embedded.py'],
    pathex=[],
    binaries=[],
    datas=[('agent_files', 'agent_files')],
    hiddenimports=[
        'tkinter',
        'tkinter.ttk',
        'tkinter.scrolledtext',
        'requests',
        'psycopg2',
        'threading',
        'subprocess',
        'shutil',
        'json',
        'time',
        'ctypes',
        'tempfile',
        'zipfile',
        'base64',
        'logging',
        'datetime',
        'pathlib',
        'os',
        'sys',
        're'
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='LANET_Agent_Installer',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    version='version_info.txt',
    icon=None,
    uac_admin=True,  # Request admin privileges
)'''
    
    with open('LANET_Agent_Installer.spec', 'w', encoding='utf-8') as f:
        f.write(spec_content)
    
    print("‚úÖ PyInstaller spec file created")

def build_executable():
    """Build the standalone executable"""
    print("üî® Building standalone executable...")
    
    try:
        # Ensure we're in the correct directory
        script_dir = Path(__file__).parent
        os.chdir(script_dir)

        # Verify spec file exists
        spec_file = 'LANET_Agent_Installer.spec'
        if not Path(spec_file).exists():
            print(f"‚ùå Spec file not found: {spec_file}")
            return None

        print(f"üìã Using spec file: {spec_file}")
        print(f"üìÅ Working directory: {Path.cwd()}")

        # Run PyInstaller
        result = subprocess.run([
            sys.executable, '-m', 'PyInstaller',
            '--clean',
            '--noconfirm',
            spec_file
        ], check=True, capture_output=True, text=True, cwd=script_dir)
        
        print("‚úÖ Executable built successfully")
        
        # Check if the executable was created
        exe_path = Path('dist') / 'LANET_Agent_Installer.exe'
        if exe_path.exists():
            size_mb = exe_path.stat().st_size / (1024 * 1024)
            print(f"‚úÖ Executable created: {exe_path} ({size_mb:.1f} MB)")
            return exe_path
        else:
            print("‚ùå Executable not found after build")
            return None
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Build failed: {e}")
        print(f"STDOUT: {e.stdout}")
        print(f"STDERR: {e.stderr}")
        return None

def cleanup_build_files():
    """Clean up temporary build files"""
    print("üßπ Cleaning up build files...")
    
    files_to_remove = [
        'standalone_installer_embedded.py',
        'version_info.txt',
        'LANET_Agent_Installer.spec'
    ]
    
    dirs_to_remove = [
        'build',
        '__pycache__'
    ]
    
    for file in files_to_remove:
        if Path(file).exists():
            os.remove(file)
            print(f"‚úÖ Removed {file}")
    
    for dir_name in dirs_to_remove:
        if Path(dir_name).exists():
            shutil.rmtree(dir_name)
            print(f"‚úÖ Removed {dir_name}")

def create_deployment_package():
    """Create deployment package with documentation"""
    print("üì¶ Creating deployment package...")
    
    deployment_dir = Path('deployment')
    deployment_dir.mkdir(exist_ok=True)
    
    # Copy executable
    exe_source = Path('dist') / 'LANET_Agent_Installer.exe'
    exe_dest = deployment_dir / 'LANET_Agent_Installer.exe'
    
    if exe_source.exists():
        shutil.copy2(exe_source, exe_dest)
        print(f"‚úÖ Copied executable to {exe_dest}")
    
    # Create deployment instructions
    instructions = '''# LANET Agent Installer - Deployment Instructions

## üìã Overview
This is a standalone executable installer for the LANET Helpdesk Agent.
No additional software or dependencies are required on target computers.

## üöÄ Deployment Instructions

### For Technicians:
1. **Copy** `LANET_Agent_Installer.exe` to the target computer
2. **Right-click** the installer and select "Run as administrator"
3. **Choose installation mode**:
   - **Quick Install**: Uses default settings (recommended for mass deployment)
   - **Custom Install**: Allows token and server configuration
4. **Click "Install LANET Agent"** and wait for completion
5. **Verify** the installation was successful

### Installation Modes:

#### Quick Install (Recommended)
- Uses pre-configured settings
- Minimal user interaction
- Ideal for mass deployment across multiple computers
- Uses default test token for immediate functionality

#### Custom Install
- Allows server URL configuration
- Requires valid installation token
- Real-time token validation
- Shows client and site information

## ‚úÖ Success Indicators
After successful installation:
- Windows service "LANETAgent" is running
- Computer appears in helpdesk within 5-10 minutes
- Complete hardware and software inventory collected
- BitLocker data available (if BitLocker is enabled)

## üîß Technical Details
- **Service Name**: LANETAgent
- **Service Account**: LocalSystem (SYSTEM privileges)
- **Installation Path**: C:\\Program Files\\LANET Agent
- **Logs**: C:\\ProgramData\\LANET Agent\\Logs
- **Auto-Start**: Enabled (starts on system boot)

## üÜò Troubleshooting
- Ensure installer is run as administrator
- Check Windows Event Log for service errors
- Review installation logs in temp directory
- Verify network connectivity to helpdesk server

## üìû Support
For technical support, contact the IT department with:
- Computer name and IP address
- Installation log files
- Error messages (if any)
'''
    
    with open(deployment_dir / 'DEPLOYMENT_INSTRUCTIONS.md', 'w', encoding='utf-8') as f:
        f.write(instructions)
    
    print(f"‚úÖ Deployment package created in {deployment_dir}")

def main():
    """Main build process"""
    print("üöÄ LANET Agent Standalone Installer Build Process")
    print("üîß Building with latest fixes and improvements")
    print("=" * 60)
    
    try:
        # Step 1: Check requirements
        check_requirements()
        
        # Step 2: Embed agent files
        embedded_script = embed_agent_files()
        if not embedded_script:
            print("‚ùå Failed to embed agent files")
            return False
        
        # Step 3: Create version info
        create_version_info()
        
        # Step 4: Create PyInstaller spec
        create_pyinstaller_spec()
        
        # Step 5: Build executable
        exe_path = build_executable()
        if not exe_path:
            print("‚ùå Failed to build executable")
            return False
        
        # Step 6: Create deployment package
        create_deployment_package()
        
        # Step 7: Cleanup
        cleanup_build_files()
        
        print("\n" + "=" * 60)
        print("üéâ BUILD COMPLETED SUCCESSFULLY!")
        print("=" * 60)
        print(f"üìÅ Executable: {exe_path}")
        print(f"üì¶ Deployment package: deployment/")
        print("\n‚úÖ The installer is ready for technician deployment!")
        print("‚úÖ No Python installation required on target computers")
        print("‚úÖ Single executable with all dependencies included")
        print("‚úÖ Enterprise-grade reliability for 2000+ computers")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Build process failed: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1)
